import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaPropertyGet, cordovaPropertySet, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ScreenOrientation = /** @class */ (function (_super) {
    __extends(ScreenOrientation, _super);
    function ScreenOrientation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Convenience enum for possible orientations
         */
        _this.ORIENTATIONS = {
            PORTRAIT_PRIMARY: 'portrait-primary',
            PORTRAIT_SECONDARY: 'portrait-secondary',
            LANDSCAPE_PRIMARY: 'landscape-primary',
            LANDSCAPE_SECONDARY: 'landscape-secondary',
            PORTRAIT: 'portrait',
            LANDSCAPE: 'landscape',
            ANY: 'any',
        };
        return _this;
    }
    ScreenOrientation.prototype.onChange = function () { return cordova(this, "onChange", { "eventObservable": true, "event": "orientationchange", "element": "window" }, arguments); };
    ScreenOrientation.prototype.lock = function (orientation) { return cordova(this, "lock", { "otherPromise": true }, arguments); };
    ScreenOrientation.prototype.unlock = function () { return cordova(this, "unlock", { "sync": true }, arguments); };
    Object.defineProperty(ScreenOrientation.prototype, "type", {
        get: function () { return cordovaPropertyGet(this, "type"); },
        set: function (value) { cordovaPropertySet(this, "type", value); },
        enumerable: false,
        configurable: true
    });
    ScreenOrientation.pluginName = "ScreenOrientation";
    ScreenOrientation.plugin = "cordova-plugin-screen-orientation";
    ScreenOrientation.pluginRef = "screen.orientation";
    ScreenOrientation.repo = "https://github.com/apache/cordova-plugin-screen-orientation";
    ScreenOrientation.platforms = ["Android", "iOS", "Windows"];
    ScreenOrientation.decorators = [
        { type: Injectable }
    ];
    return ScreenOrientation;
}(IonicNativePlugin));
export { ScreenOrientation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NjcmVlbi1vcmllbnRhdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxzRUFBdUQsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJESyxxQ0FBaUI7OztRQUN0RDs7V0FFRztRQUNILGtCQUFZLEdBQUc7WUFDYixnQkFBZ0IsRUFBRSxrQkFBa0I7WUFDcEMsa0JBQWtCLEVBQUUsb0JBQW9CO1lBQ3hDLGlCQUFpQixFQUFFLG1CQUFtQjtZQUN0QyxtQkFBbUIsRUFBRSxxQkFBcUI7WUFDMUMsUUFBUSxFQUFFLFVBQVU7WUFDcEIsU0FBUyxFQUFFLFdBQVc7WUFDdEIsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDOzs7SUFVRixvQ0FBUTtJQVdSLGdDQUFJLGFBQUMsV0FBbUI7SUFReEIsa0NBQU07MEJBTU4sbUNBQUk7Ozs7Ozs7Ozs7OztnQkFoREwsVUFBVTs7NEJBNURYO0VBNkR1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAbmFtZSBTY3JlZW4gT3JpZW50YXRpb25cbiAqIEBwcmVtaWVyIHNjcmVlbi1vcmllbnRhdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiB0byBzZXQvbG9jayB0aGUgc2NyZWVuIG9yaWVudGF0aW9uIGluIGEgY29tbW9uIHdheS5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXNjcmVlbi1vcmllbnRhdGlvbmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtTY3JlZW4gT3JpZW50YXRpb24gcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tc2NyZWVuLW9yaWVudGF0aW9uKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNjcmVlbk9yaWVudGF0aW9uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zY3JlZW4tb3JpZW50YXRpb24vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNjcmVlbk9yaWVudGF0aW9uOiBTY3JlZW5PcmllbnRhdGlvbikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIC8vIGdldCBjdXJyZW50XG4gKiBjb25zb2xlLmxvZyh0aGlzLnNjcmVlbk9yaWVudGF0aW9uLnR5cGUpOyAvLyBsb2dzIHRoZSBjdXJyZW50IG9yaWVudGF0aW9uLCBleGFtcGxlOiAnbGFuZHNjYXBlJ1xuICpcbiAqIC8vIHNldCB0byBsYW5kc2NhcGVcbiAqIHRoaXMuc2NyZWVuT3JpZW50YXRpb24ubG9jayh0aGlzLnNjcmVlbk9yaWVudGF0aW9uLk9SSUVOVEFUSU9OUy5MQU5EU0NBUEUpO1xuICpcbiAqIC8vIGFsbG93IHVzZXIgcm90YXRlXG4gKiB0aGlzLnNjcmVlbk9yaWVudGF0aW9uLnVubG9jaygpO1xuICpcbiAqIC8vIGRldGVjdCBvcmllbnRhdGlvbiBjaGFuZ2VzXG4gKiB0aGlzLnNjcmVlbk9yaWVudGF0aW9uLm9uQ2hhbmdlKCkuc3Vic2NyaWJlKFxuICogICAgKCkgPT4ge1xuICogICAgICAgIGNvbnNvbGUubG9nKFwiT3JpZW50YXRpb24gQ2hhbmdlZFwiKTtcbiAqICAgIH1cbiAqICk7XG4gKlxuICogYGBgXG4gKlxuICogQGFkdmFuY2VkXG4gKlxuICogQWNjZXB0ZWQgb3JpZW50YXRpb24gdmFsdWVzOlxuICpcbiAqIHwgVmFsdWUgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgcG9ydHJhaXQtcHJpbWFyeSAgICAgICAgICAgICAgfCBUaGUgb3JpZW50YXRpb24gaXMgaW4gdGhlIHByaW1hcnkgcG9ydHJhaXQgbW9kZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgcG9ydHJhaXQtc2Vjb25kYXJ5ICAgICAgICAgICAgfCBUaGUgb3JpZW50YXRpb24gaXMgaW4gdGhlIHNlY29uZGFyeSBwb3J0cmFpdCBtb2RlLiAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgbGFuZHNjYXBlLXByaW1hcnkgICAgICAgICAgICAgfCBUaGUgb3JpZW50YXRpb24gaXMgaW4gdGhlIHByaW1hcnkgbGFuZHNjYXBlIG1vZGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgbGFuZHNjYXBlLXNlY29uZGFyeSAgICAgICAgICAgfCBUaGUgb3JpZW50YXRpb24gaXMgaW4gdGhlIHNlY29uZGFyeSBsYW5kc2NhcGUgbW9kZS4gICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgcG9ydHJhaXQgICAgICAgICAgICAgICAgICAgICAgfCBUaGUgb3JpZW50YXRpb24gaXMgZWl0aGVyIHBvcnRyYWl0LXByaW1hcnkgb3IgcG9ydHJhaXQtc2Vjb25kYXJ5IChzZW5zb3IpLiAgIHxcbiAqIHwgbGFuZHNjYXBlICAgICAgICAgICAgICAgICAgICAgfCBUaGUgb3JpZW50YXRpb24gaXMgZWl0aGVyIGxhbmRzY2FwZS1wcmltYXJ5IG9yIGxhbmRzY2FwZS1zZWNvbmRhcnkgKHNlbnNvcikuIHxcbiAqXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2NyZWVuT3JpZW50YXRpb24nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zY3JlZW4tb3JpZW50YXRpb24nLFxuICBwbHVnaW5SZWY6ICdzY3JlZW4ub3JpZW50YXRpb24nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1zY3JlZW4tb3JpZW50YXRpb24nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTY3JlZW5PcmllbnRhdGlvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGVudW0gZm9yIHBvc3NpYmxlIG9yaWVudGF0aW9uc1xuICAgKi9cbiAgT1JJRU5UQVRJT05TID0ge1xuICAgIFBPUlRSQUlUX1BSSU1BUlk6ICdwb3J0cmFpdC1wcmltYXJ5JyxcbiAgICBQT1JUUkFJVF9TRUNPTkRBUlk6ICdwb3J0cmFpdC1zZWNvbmRhcnknLFxuICAgIExBTkRTQ0FQRV9QUklNQVJZOiAnbGFuZHNjYXBlLXByaW1hcnknLFxuICAgIExBTkRTQ0FQRV9TRUNPTkRBUlk6ICdsYW5kc2NhcGUtc2Vjb25kYXJ5JyxcbiAgICBQT1JUUkFJVDogJ3BvcnRyYWl0JyxcbiAgICBMQU5EU0NBUEU6ICdsYW5kc2NhcGUnLFxuICAgIEFOWTogJ2FueScsXG4gIH07XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gb3JpZW50YXRpb24gY2hhbmdlIGV2ZW50XG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgIGV2ZW50OiAnb3JpZW50YXRpb25jaGFuZ2UnLFxuICAgIGVsZW1lbnQ6ICd3aW5kb3cnLFxuICB9KVxuICBvbkNoYW5nZSgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTG9jayB0aGUgb3JpZW50YXRpb24gdG8gdGhlIHBhc3NlZCB2YWx1ZS5cbiAgICogU2VlIGJlbG93IGZvciBhY2NlcHRlZCB2YWx1ZXNcbiAgICogQHBhcmFtIG9yaWVudGF0aW9uIHtzdHJpbmd9IFRoZSBvcmllbnRhdGlvbiB3aGljaCBzaG91bGQgYmUgbG9ja2VkLiBBY2NlcHRlZCB2YWx1ZXMgc2VlIHRhYmxlIGFib3ZlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBsb2NrKG9yaWVudGF0aW9uOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmxvY2sgYW5kIGFsbG93IGFsbCBvcmllbnRhdGlvbnMuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgdW5sb2NrKCk6IHZvaWQge31cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IG9yaWVudGF0aW9uIG9mIHRoZSBkZXZpY2UuXG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KClcbiAgdHlwZTogc3RyaW5nO1xufVxuIl19